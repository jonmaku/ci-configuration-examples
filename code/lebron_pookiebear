%SIMPLIFIED CODE HERE
% Data
lebron_ppg_per_year =  [2003 20.9;2004 27.2; 2005 31.4; 2006 27.3; 2007 30.0; 2008 28.4; 2009 29.7; 2010 26.7; 2011 27.1; 2012 26.8; 2013 27.1; 2014 25.3; 2015 25.3; 2016 26.4; 2017 27.5;2018 27.4; 2019 25.3; 2020 25.0; 2021 30.3; 2022 28.9;2023 25.7; 2024 25.1];

% Extract year and points per game
year = lebron_ppg_per_year(:,1);
pointspergame = lebron_ppg_per_year(:,2);

% Bar chart
figure;
hold on
bar(year, pointspergame, 'FaceColor', [0.3333, 0.1451, 0.8387], 'BarWidth', 0.8, 'EdgeColor', 'k')
title('Lebron Points Average by Season', 'FontSize', 12)
xlabel('Year', 'FontSize', 12);
ylabel('Points', 'FontSize', 12);
set(gca, 'FontSize', 12)
box on
grid on

% Least Squares polynomial fit
p = polyfit(year, pointspergame, 2);
year_fine = linspace(min(year), max(year), 100); % More points for a smooth curve
points_fit = polyval(p, year_fine);
plot(year_fine, points_fit, 'Color', [1, 0.73, 0.1529], 'LineWidth', 2)
legend('Lebron Points Average Per Regular Season','Fitted Line')
hold off

% Predict points, and other analytics
year_pred = 2040;
points_pred = polyval(p, year_pred);

%Display the prediction
fprintf("Projected PPG for LeBron in 2040: %.2f\n", points_pred);




%ORIGINAL CODE HERE


Lebron
% Data
lebron_ppg_per_year =  [2003 20.9;
                    2004 27.2;
                    2005 31.4;
                    2006 27.3;
                    2007 30.0;
                    2008 28.4;
                    2009 29.7;
                    2010 26.7;
                    2011 27.1;
                    2012 26.8;
                    2013 27.1;
                    2014 25.3;
                    2015 25.3;
                    2016 26.4;
                    2017 27.5;
                    2018 27.4;
                    2019 25.3;
                    2020 25.0;
                    2021 30.3;
                    2022 28.9;
                    2023 25.7;
                    2024 25.1];
lebron_mpg_per_year = [2003 39.5;
                    2004 42.4;
                    2005 42.5;
                    2006 40.9;
                    2007 40.4;
                    2008 37.7;
                    2009 39.0;
                    2010 38.8;
                    2011 37.5;
                    2012 37.9;
                    2013 37.7;
                    2014 36.1;
                    2015 35.6;
                    2016 37.8;
                    2017 36.9;
                    2018 35.2;
                    2019 34.6;
                    2020 33.4;
                    2021 37.2;
                    2022 35.5;
                    2023 35.3;
                    2024 34.9];

% Extract year and points per game
year = lebron_ppg_per_year(:,1);
pointspergame = lebron_ppg_per_year(:,2);
minutespergame = lebron_mpg_per_year(:,2);

% Bar chart
figure;
hold on
bar(year, pointspergame, 'FaceColor', [0.3333, 0.1451, 0.8387], 'BarWidth', 0.8, 'EdgeColor', 'k')
title('Lebron Points Average by Season', 'FontSize', 12)
xlabel('Year', 'FontSize', 12);
ylabel('Points', 'FontSize', 12);
set(gca, 'FontSize', 12)
box on
grid on

% Polynomial fit (2nd degree)
p = polyfit(year, pointspergame, 2);
year_fine = linspace(min(year), max(year), 100); % More points for a smooth curve
points_fit = polyval(p, year_fine);

% Plot the polynomial fit
plot(year_fine, points_fit, 'Color', [1, 0.73, 0.1529], 'LineWidth', 2)
legend('Lebron Points Average Per Regular Season','Fitted Line')

hold off

% Predict points, and other analytics
year_pred = 2040;
points_pred = polyval(p, year_pred)

% Display the prediction
fprintf("Projected PPG for LeBron in 2040: %.2f\n", points_pred);

figure;
hold on
bar(year, minutespergame, 'FaceColor', [0.3333, 0.1451, 0.8387], 'BarWidth', 0.8, 'EdgeColor', 'k')
title('Lebron Minutes Average by Season', 'FontSize', 12)
xlabel('Year', 'FontSize', 12);
ylabel('Minutes', 'FontSize', 12);
set(gca, 'FontSize', 12)
box on
grid on

% Polynomial fit (2nd degree) 
k = polyfit(year, minutespergame, 2);
year_fine = linspace(min(year), max(year), 100);
minutes_fit = polyval(k, year_fine);

% Plot the polynomial fit
plot(year_fine, minutes_fit, 'Color', [1, 0.73, 0.1529], 'LineWidth', 2)
legend('Lebron Minutes Average Per Regular Season','Fitted Line')
hold off

%year of retirement prediction ,mpg, ppg
R = [37.0 20.0; 43.2 13.2; 22.2 10.1; 36.9 20.2; 20.3 9.2; 25.2 8.6; 28.2 17.6; 22.6 7.1; 35.4 12.7; 31.2 20.3; 32.7 13.2; 14.6 3.2; 8.8 2.9; 32.0 16.8; 26.2 8.5; 15.6 7.3; 31.0 14.5; 27.7 10.8]
%divide column 1/ column 2, sum, divide new sum by size
S = size(R)
father_time = sum(R(:,2)./R(:,1))/S(1,1)
%for loop using p and j polyfit until lebron retires
% Start at the last available year
year_future = max(year);
ppm_future = pointspergame(end) / minutespergame(end);

% Iterate year by year into the future
while ppm_future > father_time
    % Increase year
    year_future = year_future + 1;

    % Predict points and minutes per game
    ppg_future = polyval(p, year_future);
    mpg_future = polyval(k, year_future);

    % Avoid division by zero or unrealistic negative values
    if mpg_future <= 0 || ppg_future <= 0
        fprintf("LeBron's MPG or PPG reached zero, retiring in %d.\n", year_future);
        break;
    end

    % Compute future PPM
    ppm_future = ppg_future / mpg_future;
    
end

% Final Retirement Year
fprintf("LeBron is projected to retire in %d when PPM falls below %.4f\n", ...
        year_future, father_time);
fprintf("Year: %d | PPG: %.2f | MPG: %.2f | PPM: %.4f\n", ...
            year_future, ppg_future, mpg_future, ppm_future);

%Dendrimer code:
Dendrimer = [0 84; 1 228; 2 516; 3 1092; 4 2244; 5 4548; 6 9156; 7 18372; 8 36804; 9 73668; 10 147396; 11 294852]
generation = Dendrimer(:,1);
atoms = Dendrimer(:,2);

% Bar chart
figure;
hold on
bar(generation, atoms, 'FaceColor', [0.3333, 0.1451, 0.8387], 'BarWidth', 0.8, 'EdgeColor', 'k')
title('atoms per generation', 'FontSize', 12)
xlabel('generation', 'FontSize', 12);
ylabel('atoms', 'FontSize', 12);
set(gca, 'FontSize', 12)
box on
grid on

% Polynomial fit (2nd degree)
p = polyfit(generation, atoms, 6);
generation_fine = linspace(min(generation), max(generation), 100); % More atoms for a smooth curve
atoms_fit = polyval(p, generation_fine);

% Plot the polynomial fit
plot(generation_fine, atoms_fit, 'Color', [1, 0.73, 0.1529], 'LineWidth', 2)
legend('atoms  Per generation','Fitted Line')

hold off

xlim([-1.2 12.2])
ylim([-50000 300000])

% Predict atoms, and other analytics
generation_pred = 100;
atoms_pred = polyval(p, generation_pred)

% Display the prediction
fprintf("Projected atoms in 100th generation: %.2f\n", atoms_pred);



